<?phpnamespace OpenOrchestra\ModelBundle\Tests\Functional\Repository;use OpenOrchestra\ModelBundle\Repository\SiteRepository;use OpenOrchestra\Pagination\Configuration\FinderConfiguration;use OpenOrchestra\Pagination\Configuration\PaginateFinderConfiguration;use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;/** * Class SiteRepositoryTest */class SiteRepositoryTest extends KernelTestCase{    /**     * @var SiteRepository     */    protected $repository;    /**     * Set up test     */    protected function setUp()    {        parent::setUp();        static::bootKernel();        $this->repository = static::$kernel->getContainer()->get('open_orchestra_model.repository.site');    }    /**     * @param boolean $deleted     * @param array   $descriptionEntity     * @param array   $search     * @param int     $skip     * @param int     $limit     * @param integer $count     *     * @dataProvider provideDeletedAndPaginateAndSearch     */    public function testFindByDeletedForPaginate($deleted, $descriptionEntity, $search, $skip, $limit, $count)    {        $configuration = PaginateFinderConfiguration::generateFromVariable($descriptionEntity, $search);        $configuration->setPaginateConfiguration(null, $skip, $limit);        $sites = $this->repository->findByDeletedForPaginate($deleted, $configuration);        $this->assertCount($count, $sites);    }    /**     * @return array     */    public function provideDeletedAndPaginateAndSearch()    {        $descriptionEntity = $this->getDescriptionColumnEntity();        return array(            array(false, array(), null, 0 ,2 , 2),            array(false, array(), null, 0 ,1 , 1),            array(true, array(), null, 0 ,2 , 1),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '2'), 'demo'), null, null, 1),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1'), 'demo'), null, null, 0),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1', 'name' => 'demo')), null, null, 0),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1', 'name' => 'front')), null, null, 1),            array(false, $descriptionEntity, $this->generateSearchProvider(null, 'fake search'), null, null, 0)        );    }    /**     * @param array   $order     * @param array   $orderId     *     * @dataProvider provideOrderDeletedAndPaginateAndSearch     */    public function testOrderFindByDeletedForPaginate($order, $orderId)    {        $configuration = PaginateFinderConfiguration::generateFromVariable(            $this->getDescriptionColumnEntity(),            $this->generateSearchProvider(array('name' => 'site'))        );        $configuration->setPaginateConfiguration($order);        $sites = $this->repository->findByDeletedForPaginate(false, $configuration);        $this->assertSameOrder($sites, $orderId);    }    /**     * @return array     */    public function provideOrderDeletedAndPaginateAndSearch()    {        return array(            array(array('name' => 'site_id', 'dir' => 'desc'), array(2, 1)),            array(array('name' => 'site_id', 'dir' => 'asc'), array(1, 2)),            array(array('name' => 'name', 'dir' => 'asc'), array(2, 1)),            array(array('name' => 'name', 'dir' => 'desc'), array(1, 2)),        );    }    /**     * @param boolean $deleted     * @param integer $count     *     * @dataProvider provideBooleanDeletedCount     */    public function testCountByDeleted($deleted, $count)    {        $sites = $this->repository->countByDeleted($deleted);        $this->assertEquals($count, $sites);    }    /**     * @return array     */    public function provideBooleanDeletedCount()    {        return array(            array(true, 1),        );    }    /**     * @param boolean $deleted     * @param array   $descriptionEntity     * @param array   $search     * @param int     $count     *     * @dataProvider provideColumnsAndSearchAndCount     */    public function testCountWithSearchFilterByDeleted($deleted, $descriptionEntity, $search, $count)    {        $configuration = FinderConfiguration::generateFromVariable($descriptionEntity, $search);        $sites = $this->repository->countWithSearchFilterByDeleted($deleted, $configuration);        $this->assertEquals($count, $sites);    }    /**     * @return array     */    public function provideColumnsAndSearchAndCount()    {        $descriptionEntity = $this->getDescriptionColumnEntity();        return array(            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '2'), 'demo'), 1),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1'), 'demo'), 0),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1', 'name' => 'demo')), 0),            array(false, $descriptionEntity, $this->generateSearchProvider(array('site_id' => '1', 'name' => 'front')), 1),            array(true, $descriptionEntity, $this->generateSearchProvider(null, 'fake search'), 0)        );    }    /**     * Generate columns of site with search value     *     * @param array|null  $searchColumns     * @param string      $globalSearch     *     * @return array     */    protected function generateSearchProvider($searchColumns = null, $globalSearch = '')    {        $search = array();        if (null !== $searchColumns) {            $columns = array();            foreach ($searchColumns as $name => $value) {                $columns[$name] = $value;            }            $search['columns'] = $columns;        }        if (!empty($globalSearch)) {            $search['global'] = $globalSearch;        }        return $search;    }    /**     * Generate relation between columns names and entities attributes     *     * @return array     */    protected function getDescriptionColumnEntity()    {        return array(            'site_id' => array('key' => 'siteId'),            'name' => array('key' => 'name'),        );    }    /**     * @param array $sites     * @param array $orderId     */    protected function assertSameOrder($sites, $orderId)    {        foreach ($sites as $index => $site) {            $this->assertEquals($site->getSiteId(), $orderId[$index]);        }    }}